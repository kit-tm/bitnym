# Setting up the logging to read this configuration file:
#-Djava.util.logging.config.file=config/logging.properties
#System.setProperty("java.util.logging.config.file", "config/logging.properties");

# The ConsoleHandler outputs messages on std.err
.handlers = java.util.logging.ConsoleHandler

# Multiple handlers are also allowed.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Standard log level
 .level = WARNING
# .level = INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# Write messages to file
java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# Tells the SimpleFormatter to output timestamp and method name on one line.
java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$-6s %2$s -> %5$s%6$s%n

# In addition to regular log levels filters can be set for each handler. This can be used, for example, for
# outputting all messages to the console and only messages starting from log level INFO to the log file.
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Settings for separate loggers.
############################################################
